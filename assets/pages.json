{"pages":[{"folder":"constants","folderCaption":"Constants","folderSort":10,"baseName":"/constants/constants1.js","link":null,"ext":"js","sort":1,"html":null,"js":"\r\nconst BOARD_SIZE = 10\r\nconst LEVELS_3D = 5\r\n\r\nconst C3PO = \"C-3PO\"\r\nconst LEIA = \"Princess Leia\"\r\nconst LUKE = \"Luke Skywalker\"\r\n\r\nexport default {\r\n  BOARD_SIZE,\r\n  LEVELS_3D,\r\n\r\n  C3PO,\r\n  LEIA,\r\n  LUKE,\r\n}","caption":"constants1.js","description":"JS file with constants","slideText":["It is easy to create JS file with constants","Exporting & importing is similar to C headers"],"index":0},{"folder":"constants","folderCaption":"Constants","folderSort":10,"baseName":"/constants/constant20.vue","link":"/vue/constants/constant20","ext":"vue","sort":20,"html":"\r\n  <div>My constant = {{ chees.C3PO }}</div>\r\n","js":"\r\nimport chees from './constants1.js'\r\n\r\nexport default {\r\n}\r\n","fileName":"constant20.vue","caption":"constant20.vue","description":"Constant in template section","slideText":["Importing and just using constants in template does not work"],"index":1},{"folder":"constants","folderCaption":"Constants","folderSort":10,"baseName":"/constants/constant30.vue","link":"/vue/constants/constant30","ext":"vue","sort":30,"html":"\r\n  <div>\r\n    <div>Whole object = {{ chees }}</div>\r\n    <hr>\r\n    <div>One (constant) element = {{ chees.C3PO }}</div>\r\n  </div>\r\n","js":"\r\nimport chees from './constants1.js'\r\n\r\nexport default {\r\n  data: function() {\r\n    return {\r\n      chees\r\n    }\r\n  }\r\n}\r\n","fileName":"constant30.vue","caption":"constant30.vue","description":"Whole object in template section","slideText":["Put constants in data section and they can be used in HTML template","Bad decision, because data section is for reactive (changing) elements, but constants DO NOT CHANGE"],"index":2},{"folder":"constants","folderCaption":"Constants","folderSort":10,"baseName":"/constants/constant40.vue","link":"/vue/constants/constant40","ext":"vue","sort":40,"html":"\r\n  <div>My constant {{ variable }}</div>\r\n","js":"\r\nimport chees from './constants1.js'\r\n\r\nexport default {\r\n  data: function() {\r\n    return {\r\n      variable: chees.C3PO,\r\n    }\r\n  },\r\n}\r\n","fileName":"constant40.vue","caption":"constant40.vue","description":"Variable (with constant value) in template","slideText":["Well we are using constants to check or set some variables and variable can be set to a constant and displayed"],"index":3},{"folder":"constants","folderCaption":"Constants","folderSort":10,"baseName":"/constants/constant50.vue","link":"/vue/constants/constant50","ext":"vue","sort":50,"html":"\r\n  <div>\r\n    <div v-if=\"variable === chees.C3PO\">This is C-3PO</div>\r\n    <div v-else>Upsi not C3PO</div>\r\n  </div>\r\n","js":"\r\nimport chees from './constants1.js'\r\n\r\nexport default {\r\n  data: function() {\r\n    return {\r\n      variable: chees.C3PO,\r\n    }\r\n  },\r\n}\r\n","fileName":"constant50.vue","caption":"constant50.vue","description":"Check, with constant, in template","slideText":["Use-case: Conditional display of HTML elements","Again you cant't use constant in HTML template"],"index":4},{"folder":"constants","folderCaption":"Constants","folderSort":10,"baseName":"/constants/constant60.vue","link":"/vue/constants/constant60","ext":"vue","sort":60,"html":"\r\n  <div v-if=\"isC3PO\">This is C-3PO</div>\r\n  <div v-else>Upsi, not C-3PO</div>\r\n","js":"\r\nimport chees from './constants1.js'\r\n\r\nexport default {\r\n  data: function() {\r\n    return {\r\n      variable: chees.C3PO,\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    isC3PO() {\r\n      return this.variable === chees.C3PO\r\n    }\r\n  }\r\n}\r\n","fileName":"constant60.vue","caption":"constant60.vue","description":"Using computed properties","slideText":["We have to use computed properties, which is better for (at least) TWO reasons","Separation of concerns","Reusability and testability","NOTE: We are using two divs under a template, so template has two children which is not allowed"],"index":5},{"folder":"constants","folderCaption":"Constants","folderSort":10,"baseName":"/constants/constant70.js","link":null,"ext":"js","sort":70,"html":null,"js":"\r\n/*\r\n<template>\r\n  <div v-if=\"isC3PO\">This is C-3PO</div>\r\n  <div v-if=\"notC3PO\">Upsi, not C-3PO</div>\r\n</template>\r\n\r\n***********************************************************\r\n  Error compiling template:\r\n\r\n  <div v-if=\"isC3PO\">This is C-3PO</div>\r\n  <div v-if=\"notC3PO\">Upsi, not C-3PO</div>\r\n\r\n  - Component template should contain exactly one root element.\r\n\r\n    If you are using v-if on multiple elements,\r\n    use v-else-if to chain them instead.\r\n***********************************************************\r\n\r\n<script>\r\n...\r\n</script>\r\n*/","caption":"constant70.js","description":"Error in template","slideText":["We can't use two IF statements, because they are (in general) unrelated so they can both be true","The solution IF - ELSE is in error description"],"index":6},{"folder":"functions","folderCaption":"Structure of VUE single file","folderSort":20,"baseName":"/functions/structure10.vue","link":"/vue/functions/structure10","ext":"vue","sort":10,"html":"\r\n  <div>\r\n    <input v-model=\"fullName\" placeholder=\"your name\">\r\n\r\n    <div>My name is {{ surName }},  {{ name }} {{ surName }}</div>\r\n  </div>\r\n","js":"\r\nexport default {\r\n  data: function() {\r\n    return {\r\n      fullName: null\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    surName: function () {\r\n      return this.fullName.split(\" \")[1]\r\n    },\r\n    name: function () {\r\n      return this.fullName.split(\" \")[0]\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.fullName = \"James Bond\"\r\n  }\r\n}\r\n","fileName":"structure10.vue","caption":"structure10.vue","description":"Basic structure of VUE single file","slideText":["In most of examples Vue lifecycle hooks are semantically written differently than other functions","Are they special?"],"index":7},{"folder":"functions","folderCaption":"Structure of VUE single file","folderSort":20,"baseName":"/functions/structure20.vue","link":"/vue/functions/structure20","ext":"vue","sort":20,"html":"\r\n  <div>\r\n    <input v-model=\"fullName\" placeholder=\"your name\">\r\n\r\n    <div>My name is {{ surName }},  {{ name }} {{ surName }}</div>\r\n  </div>\r\n","js":"\r\nexport default {\r\n  data: function() {\r\n    return {\r\n      fullName: null\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    surName: function () {\r\n      return this.fullName.split(\" \")[1]\r\n    },\r\n    name: function () {\r\n      return this.fullName.split(\" \")[0]\r\n    }\r\n  },\r\n\r\n  created: function () {\r\n    this.fullName = \"James Bond\"\r\n  }\r\n}\r\n","fileName":"structure20.vue","caption":"structure20.vue","description":"Basic structure of VUE single file II","slideText":["No, You can use the same semantics; with function keyword"],"index":8},{"folder":"functions","folderCaption":"Structure of VUE single file","folderSort":20,"baseName":"/functions/structure30.vue","link":"/vue/functions/structure30","ext":"vue","sort":30,"html":"\r\n  <div>\r\n    <input v-model=\"fullName\" placeholder=\"your name\">\r\n\r\n    <div>My name is {{ surName }},  {{ name }} {{ surName }}</div>\r\n  </div>\r\n","js":"\r\nexport default {\r\n  data() {\r\n    return {\r\n      fullName: null\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    surName() {\r\n      return this.fullName.split(\" \")[1]\r\n    },\r\n    name() {\r\n      return this.fullName.split(\" \")[0]\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.fullName = \"James Bond\"\r\n  }\r\n}\r\n","fileName":"structure30.vue","caption":"structure30.vue","description":"Basic structure of VUE single file III","slideText":["No, You can use the same semantics; without function keyword"],"index":9},{"folder":"functions","folderCaption":"Structure of VUE single file","folderSort":20,"baseName":"/functions/structure40.vue","link":"/vue/functions/structure40","ext":"vue","sort":40,"html":"\r\n  <div>\r\n    <input v-model=\"fullName\" placeholder=\"your name\">\r\n\r\n    <div>My name is {{ surName }},  {{ name }} {{ surName }}</div>\r\n  </div>\r\n","js":"\r\nexport default {\r\n  data() {\r\n    return {\r\n      fullName: null\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    surName: () => {\r\n      return this.fullName.split(\" \")[1]\r\n    },\r\n    name() {\r\n      return this.fullName.split(\" \")[0]\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.fullName = \"James Bond\"\r\n  }\r\n}\r\n","fileName":"structure40.vue","caption":"structure40.vue","description":"Basic structure of VUE single file IV","slideText":["But you can't use arrow functions"],"index":10},{"folder":"functions","folderCaption":"Structure of VUE single file","folderSort":20,"baseName":"/functions/structure50.vue","link":"/vue/functions/structure50","ext":"vue","sort":50,"html":"\r\n  <div>\r\n    <input v-model=\"fullName\" placeholder=\"your name\">\r\n\r\n    <div>My name is {{ name }} aka {{ nameA }}</div>\r\n  </div>\r\n","js":"\r\nexport default {\r\n  data() {\r\n    return {\r\n      fullName: null\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    name() {\r\n      console.log('name (clasical): ', this)\r\n      return this.fullName.split(\" \")[0]\r\n    },\r\n    nameA: () => {\r\n      console.log('nameA (arrow): ', this)\r\n      try {\r\n        return this.fullName.split(\" \")[0]\r\n      } catch(err) {\r\n        console.log(err)\r\n        return err\r\n      }\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.fullName = \"James Bond\"\r\n  }\r\n}\r\n","fileName":"structure50.vue","caption":"structure50.vue","description":"Basic structure of VUE single file V","slideText":["The reason is arrow functions bind the parent context, so this will not be the Vue instance"],"index":11},{"folder":"reactivity","folderCaption":"Reactivity","folderSort":30,"baseName":"/reactivity/reactivity10.vue","link":"/vue/reactivity/reactivity10","ext":"vue","sort":10,"html":"\r\n  <div>\r\n    <div>My name is {{ name }}</div>\r\n    <button @click=\"changeName\">Change Name</button>\r\n  </div>\r\n","js":"\r\nexport default {\r\n  data() {\r\n    return {\r\n      name: {\r\n        firstName: \"James\",\r\n        surName: \"Bond\",\r\n      }\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    changeName() {\r\n      this.name.firstName = \"Julia\";\r\n    }\r\n  }\r\n}\r\n","fileName":"reactivity10.vue","caption":"reactivity10.vue","description":"Change property of an object","slideText":["Simple variables and object properties are reactive"],"index":12},{"folder":"reactivity","folderCaption":"Reactivity","folderSort":30,"baseName":"/reactivity/reactivity20.vue","link":"/vue/reactivity/reactivity20","ext":"vue","sort":20,"html":"\r\n  <div>\r\n    <div>My name is {{ name }}</div>\r\n    <button @click=\"changeName\">Change Name</button>\r\n  </div>\r\n","js":"\r\nexport default {\r\n  data() {\r\n    return {\r\n      name: [\"James\", \"Bond\"]\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    changeName() {\r\n      this.name[0] = \"Julia\";\r\n    }\r\n  }\r\n}\r\n","fileName":"reactivity20.vue","caption":"reactivity20.vue","description":"Change element of the array","slideText":["Change of array element is not reactive","Well changing an element is just changing a memory slot and Vue can't detect that by inspection a pointer to the beginning of an array"],"index":13},{"folder":"reactivity","folderCaption":"Reactivity","folderSort":30,"baseName":"/reactivity/reactivity30.vue","link":"/vue/reactivity/reactivity30","ext":"vue","sort":30,"html":"\r\n  <div>\r\n    <div>My name is {{ name }}</div>\r\n    <button @click=\"addName\">Add Name</button>\r\n  </div>\r\n","js":"\r\nexport default {\r\n  data() {\r\n    return {\r\n      name: [\"James\", \"Bond\"]\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    addName() {\r\n      this.name.push(\"Julia\");\r\n    }\r\n  }\r\n}\r\n","fileName":"reactivity30.vue","caption":"reactivity30.vue","description":"Add an element to the array","slideText":["But, Vue can certainly detect using a function on an array","Adding element by using a function is detectible so it is reactive"],"index":14},{"folder":"reactivity","folderCaption":"Reactivity","folderSort":30,"baseName":"/reactivity/reactivity40.vue","link":"/vue/reactivity/reactivity40","ext":"vue","sort":40,"html":"\r\n  <div>\r\n    <div>My name is {{ name }}</div>\r\n    <button @click=\"changeName\">Change Name</button>\r\n  </div>\r\n","js":"\r\nexport default {\r\n  data() {\r\n    return {\r\n      name: [\"James\", \"Bond\"]\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    changeName() {\r\n      this.$set(this.name, 0, \"Julia\")\r\n    }\r\n  }\r\n}\r\n","fileName":"reactivity40.vue","caption":"reactivity40.vue","description":"Replace an element in the array - reactivity works","slideText":["All the same is with changing an element in array, by using a function, Vue can detect and react to change"],"index":15},{"folder":"reactivity","folderCaption":"Reactivity","folderSort":30,"baseName":"/reactivity/reactivity50.vue","link":"/vue/reactivity/reactivity50","ext":"vue","sort":50,"html":"\r\n  <div>\r\n    <div>My name is {{ name }}</div>\r\n    <button @click=\"addNewProperty\">Add new property</button>\r\n  </div>\r\n","js":"\r\nexport default {\r\n  data() {\r\n    return {\r\n      name: {\r\n        firstName: \"James\",\r\n        surName: \"Bond\",\r\n      }\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    addNewProperty() {\r\n      this.name.newProperty = 1;\r\n    }\r\n  }\r\n}\r\n","fileName":"reactivity50.vue","caption":"reactivity50.vue","description":"Add a property to the object","slideText":["But, adding a new property to an object is again not reactive :("],"index":16},{"folder":"reactivity","folderCaption":"Reactivity","folderSort":30,"baseName":"/reactivity/reactivity60.vue","link":"/vue/reactivity/reactivity60","ext":"vue","sort":60,"html":"\r\n  <div>\r\n    <div>My name is {{ name }}</div>\r\n    <button @click=\"addNewProperty\">Add new property</button>\r\n  </div>\r\n","js":"\r\nexport default {\r\n  data() {\r\n    return {\r\n      name: {\r\n        firstName: \"James\",\r\n        surName: \"Bond\",\r\n      }\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    addNewProperty() {\r\n      this.$set(this.name, 'newProperty', 1);\r\n    }\r\n  }\r\n}\r\n","fileName":"reactivity60.vue","caption":"reactivity60.vue","description":"Add a property to the object (array style)","slideText":["And, again, adding a property through a function, make it detectable by Vue"],"index":17},{"folder":"reactivity","folderCaption":"Reactivity","folderSort":30,"baseName":"/reactivity/reactivity70.vue","link":"/vue/reactivity/reactivity70","ext":"vue","sort":70,"html":"\r\n  <div>\r\n    <div>My name is {{ name }}</div>\r\n    <button @click=\"change\">Change object</button>\r\n  </div>\r\n","js":"\r\nexport default {\r\n  data() {\r\n    return {\r\n      name: {\r\n        firstName: \"James\",\r\n        surName: \"Bond\",\r\n      }\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    change() {\r\n      let newObject = {\r\n        company: \"BMW\",\r\n        model: \"X3\",\r\n      }\r\n\r\n      this.name = newObject\r\n    }\r\n  }\r\n}\r\n","fileName":"reactivity70.vue","caption":"reactivity70.vue","description":"Change the whole object","slideText":["Changing a whole object represents changing a pointer and Vue ca certainly detect that"],"index":18},{"folder":"reactivity","folderCaption":"Reactivity","folderSort":30,"baseName":"/reactivity/reactivity80.vue","link":"/vue/reactivity/reactivity80","ext":"vue","sort":80,"html":"\r\n  <div>\r\n    <div>My name is {{ name }}</div>\r\n    <button @click=\"changeObject\">Change Object</button>\r\n    <button @click=\"changeCompany\">Change Company</button>\r\n    <button @click=\"addNewProperty\">Add new Property</button>\r\n  </div>\r\n","js":"\r\nexport default {\r\n  data() {\r\n    return {\r\n      name: {\r\n        firstName: \"James\",\r\n        surName: \"Bond\",\r\n      }\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    changeObject() {\r\n      let newObject = {\r\n        company: \"BMW\",\r\n        model: \"X3\",\r\n      }\r\n\r\n      this.name = newObject\r\n    },\r\n    changeCompany() {\r\n      this.name.company = 'Skoda'\r\n    },\r\n    addNewProperty() {\r\n      this.name.newProperty = 1;\r\n    }\r\n  }\r\n}\r\n","fileName":"reactivity80.vue","caption":"reactivity80.vue","description":"Change the whole object, change the property and add one","slideText":["Playing with actions can resemble Vue being able to detect adding a property?","Change object -> Add property -> Change Company"],"index":19},{"folder":"reactivity","folderCaption":"Reactivity","folderSort":30,"baseName":"/reactivity/reactivity90.vue","link":"/vue/reactivity/reactivity90","ext":"vue","sort":90,"html":"\r\n  <div>\r\n    <div>My name is {{ name }}</div>\r\n    <button @click=\"display(changeObject)\">Change Object</button>\r\n    <button @click=\"display(changeCompany)\">Change Company</button>\r\n    <button @click=\"display(addNewProperty)\">Add new Property</button>\r\n\r\n    <hr>\r\n    Value of 'name' before action: [<span ref=\"nameSpanBefore\" />]\r\n\r\n    <hr>\r\n    Value of 'name' after action: [<span ref=\"nameSpanAfter\" />]\r\n  </div>\r\n","js":"\r\nexport default {\r\n  data() {\r\n    return {\r\n      name: {\r\n        firstName: \"James\",\r\n        surName: \"Bond\",\r\n      }\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    display(action) {\r\n      this.$refs.nameSpanBefore.innerText = JSON.stringify(this.name)\r\n      action();\r\n      this.$refs.nameSpanAfter.innerText = JSON.stringify(this.name)\r\n    },\r\n    changeObject() {\r\n      this.name = {\r\n        company: \"BMW\",\r\n        model: \"X3\",\r\n      }\r\n    },\r\n    changeCompany() {\r\n      this.name.company = 'Skoda'\r\n    },\r\n    addNewProperty() {\r\n      this.name.newProperty = 1;\r\n    }\r\n  }\r\n}\r\n","fileName":"reactivity90.vue","caption":"reactivity90.vue","description":"Change the whole object, change the property and add one - reactivity?","slideText":["By carefully examining single action, we can see than actions do change object, but Vue can't detect all the changes."],"index":20},{"folder":"reactivity","folderCaption":"Reactivity","folderSort":30,"baseName":"/reactivity/reactivity100.vue","link":"/vue/reactivity/reactivity100","ext":"vue","sort":100,"html":"\r\n  <div>\r\n    <button @click=\"test1\">Get the whole object</button>\r\n    <button @click=\"test2\">Get name</button>\r\n    <button @click=\"test3\">Get \"full name\"</button>\r\n    <br><hr>\r\n    <button @click=\"test4\">Set name</button>\r\n  </div>\r\n","js":"\r\n\r\nfunction Person () {\r\n  this.name = \"James Bond\"\r\n  this.age = 56\r\n}\r\n\r\nPerson.prototype.getFullName = function() {\r\n  return `${this.name} is ${this.age} old`\r\n};\r\n\r\nfunction GetPersonProxy() {\r\n  let james = new Person()\r\n\r\n  return new Proxy(james, {\r\n    get: function(target, prop, receiver) {\r\n      console.log(`##PROXY get##: ${prop} was accessed.`)\r\n      return target[prop]\r\n    },\r\n\r\n    set: function(obj, prop, value) {\r\n      console.log(`##PROXY set##: ${prop} set to ${value}`)\r\n      return Reflect.set(...arguments)\r\n    }\r\n  });\r\n}\r\n\r\nexport default {\r\n  created() {\r\n    this.jBond = GetPersonProxy()\r\n  },\r\n\r\n  methods: {\r\n    test1() {\r\n      console.log(this.jBond)\r\n    },\r\n    test2() {\r\n      const result = this.jBond.name\r\n    },\r\n    test3() {\r\n      const result = this.jBond.getFullName()\r\n    },\r\n    test4() {\r\n      this.jBond.name = \"Jessie Bond\";\r\n    }\r\n  },\r\n}\r\n","fileName":"reactivity100.vue","caption":"reactivity100.vue","description":"Javascript Proxy object","slideText":["Reactivity means \"react to change\". But reacting is quite easy, just executing a function! Detecting is the problem!","Detecting is done by using a design pattern called 'Proxy'","Newer versions of JavaScript do have the exact object - 'Proxy'. And we can hook to proxy and detect all changes!"],"index":21},{"folder":"reactivity","folderCaption":"Reactivity","folderSort":30,"baseName":"/reactivity/reactivity110.vue","link":"/vue/reactivity/reactivity110","ext":"vue","sort":110,"html":"\r\n  <div>\r\n    <button @click=\"test1\">Get the whole array</button>\r\n    <button @click=\"test2\">Change second element to 22</button>\r\n    <button @click=\"test3\">Add element</button>\r\n  </div>\r\n","js":"\r\nfunction GetProxy(object) {\r\n  return new Proxy(object, {\r\n    get: function(target, prop, receiver) {\r\n      console.log(`##PROXY get##: ${prop} was accessed.`)\r\n      return target[prop]\r\n    },\r\n\r\n    set: function(obj, prop, value) {\r\n      console.log(`##PROXY set##: ${prop} set to ${value}`)\r\n      return Reflect.set(...arguments)\r\n    }\r\n  });\r\n}\r\n\r\nexport default {\r\n  created () {\r\n    this.array = GetProxy([10, 20, 30])\r\n  },\r\n\r\n  methods: {\r\n    test1() {\r\n      console.log(this.array)\r\n    },\r\n    test2() {\r\n      this.array[1] = 22\r\n    },\r\n    test3() {\r\n      this.array.push(40)\r\n    }\r\n  },\r\n}\r\n","fileName":"reactivity110.vue","caption":"reactivity110.vue","description":"Proxying array","slideText":["The same example as previous, but using array instead of object"],"index":22},{"folder":"reactivity","folderCaption":"Reactivity","folderSort":30,"baseName":"/reactivity/reactivity120.vue","link":"/vue/reactivity/reactivity120","ext":"vue","sort":120,"html":"\r\n  <div>\r\n    <button @click=\"test1\">Get name</button>\r\n    <button @click=\"test2\">Change name</button>\r\n    <button @click=\"test3\">Add surname</button>\r\n    <button @click=\"changes=[]\">Clear</button>\r\n\r\n    <ol>\r\n      <li v-for=\"(cng, cidx) in changes\" :key=\"cidx\">{{ cng }}</li>\r\n    </ol>\r\n  </div>\r\n","js":"\r\nfunction GetProxy(object) {\r\n  return new Proxy(object, {\r\n    get: function(target, prop, receiver) {\r\n      $nuxt.$emit('ACT_PROXY', { type: 'GET', prop });\r\n      return target[prop]\r\n    },\r\n\r\n    set: function(obj, prop, value) {\r\n      $nuxt.$emit('ACT_PROXY', { type: 'SET', prop, value });\r\n      return Reflect.set(...arguments)\r\n    }\r\n  });\r\n}\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      obj: null,\r\n      changes: [],\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.obj = GetProxy({ name: 'James' })\r\n    this.$nuxt.$on('ACT_PROXY', (data) => {\r\n      this.changes.push(`FROM PROXY: ${JSON.stringify(data)}`)\r\n    });\r\n  },\r\n\r\n  beforeDestroy() {\r\n    this.$nuxt.$off('ACT_PROXY');\r\n  },\r\n\r\n  methods: {\r\n    test1() {\r\n      let n = this.obj.name\r\n    },\r\n    test2() {\r\n      this.obj.name = 'Jessie'\r\n    },\r\n    test3() {\r\n      this.obj.surName = 'Bond'\r\n    }\r\n  },\r\n}\r\n","fileName":"reactivity120.vue","caption":"reactivity120.vue","description":"Proxying object - event bus","slideText":["To make the talk a little more exciting. Console.log is ok, but how can we hook Vue to proxy and display changes on screen.","We can use another design pattern called observer~subscriber and by using event bus Vue can be notified when changes ocures."],"index":23},{"folder":"reactivity","folderCaption":"Reactivity","folderSort":30,"baseName":"/reactivity/reactivity130.vue","link":"/vue/reactivity/reactivity130","ext":"vue","sort":130,"html":"\r\n  <div>\r\n    <button @click=\"test1\">Get name</button>\r\n    <button @click=\"test2\">Change name</button>\r\n    <button @click=\"test3\">Add surname</button>\r\n    <button @click=\"changes=[]\">Clear</button>\r\n\r\n    <ol>\r\n      <li v-for=\"(cng, cidx) in changes\" :key=\"cidx\">{{ cng }}</li>\r\n    </ol>\r\n  </div>\r\n","js":"\r\nfunction GetProxy(object, notifierFunction) {\r\n  return new Proxy(object, {\r\n    get: function(target, prop, receiver) {\r\n      notifierFunction({ type: 'GET', prop });\r\n      return target[prop]\r\n    },\r\n\r\n    set: function(obj, prop, value) {\r\n      notifierFunction({ type: 'SET', prop, value });\r\n      return Reflect.set(...arguments)\r\n    }\r\n  });\r\n}\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      obj: null,\r\n      changes: [],\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.obj = GetProxy({ name: 'James' }, (data) => {\r\n      this.changes.push(`FROM PROXY: ${JSON.stringify(data)}`)\r\n    });\r\n  },\r\n\r\n  methods: {\r\n    test1() {\r\n      let n = this.obj.name\r\n    },\r\n    test2() {\r\n      this.obj.name = 'Jessie'\r\n    },\r\n    test3() {\r\n      this.obj.surName = 'Bond'\r\n    }\r\n  },\r\n}\r\n","fileName":"reactivity130.vue","caption":"reactivity130.vue","description":"Proxying object - notification","slideText":["Design patterns are great and we should definitely use them, but in this concrete example the event bus is a bit of an \"over-kill\".","Here we can use simple call-back function and the code is smaller and easier to read.","NOTE: Something is displayed at the beginning! Here you can see that Vue is inspecting object"],"index":24},{"folder":"reactivity","folderCaption":"Reactivity","folderSort":30,"baseName":"/reactivity/reactivity140.vue","link":"/vue/reactivity/reactivity140","ext":"vue","sort":140,"html":"\r\n  <div>\r\n    <button @click=\"test1\">Get name</button>\r\n    <button @click=\"test2\">Change name</button>\r\n    <button @click=\"test3\">Add surname</button>\r\n    <button @click=\"changes=[]\">Clear</button>\r\n\r\n    <ol>\r\n      <li v-for=\"(cng, cidx) in changes\" :key=\"cidx\">{{ cng }}</li>\r\n    </ol>\r\n  </div>\r\n","js":"\r\nfunction GetProxy(object) {\r\n  return new Proxy(object, {\r\n    get: function(target, prop, receiver) {\r\n      $nuxt.$emit('ACT_PROXY', { type: 'GET', prop });\r\n      return target[prop]\r\n    },\r\n\r\n    set: function(obj, prop, value) {\r\n      $nuxt.$emit('ACT_PROXY', { type: 'SET', prop, value });\r\n      return Reflect.set(...arguments)\r\n    }\r\n  });\r\n}\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      obj: null,\r\n      changes: [],\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.$nuxt.$on('ACT_PROXY', (data) => {\r\n      this.changes.push(`FROM PROXY: ${JSON.stringify(data)}`)\r\n    });\r\n    this.obj = GetProxy({ name: 'James' })\r\n  },\r\n\r\n  beforeDestroy() {\r\n    this.$nuxt.$off('ACT_PROXY');\r\n  },\r\n\r\n  methods: {\r\n    test1() {\r\n      let n = this.obj.name\r\n    },\r\n    test2() {\r\n      this.obj.name = 'Jessie'\r\n    },\r\n    test3() {\r\n      this.obj.surName = 'Bond'\r\n    }\r\n  },\r\n}\r\n","fileName":"reactivity140.vue","caption":"reactivity140.vue","description":"Proxying object - event bus second try","slideText":["This example is the same as before, again using an event bus, only now it hooks to event bus before proxy!"],"index":25},{"folder":"wtf","folderCaption":"What The F..k?","folderSort":40,"baseName":"/wtf/wtf10.vue","link":"/vue/wtf/wtf10","ext":"vue","sort":10,"html":"\r\n  <div>\r\n    {{ result }}<br>\r\n    <button @click=\"result = calculate(null)\">Calculate 1</button>\r\n    <button @click=\"result = calculate('this is some input value')\">Calculate 2</button>\r\n  </div>\r\n","js":"\r\nexport default {\r\n  data: function() {\r\n    return {\r\n      result: null\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    calculate(input) {\r\n      if (!input)\r\n        return `Empty value`\r\n\r\n      return\r\n        `Long string with result [${input}]`\r\n    }\r\n  }\r\n}\r\n","fileName":"wtf10.vue","caption":"wtf10.vue","description":"WTF","slideText":["Using string templates is causing strange results?"],"index":26},{"folder":"wtf","folderCaption":"What The F..k?","folderSort":40,"baseName":"/wtf/wtf20.vue","link":"/vue/wtf/wtf20","ext":"vue","sort":20,"html":"\r\n  <div>\r\n    {{ result }}<br>\r\n    <button @click=\"result = calculate(null)\">Calculate 1</button>\r\n    <button @click=\"result = calculate('this is some input value')\">Calculate 2</button>\r\n  </div>\r\n","js":"\r\nexport default {\r\n  data: function() {\r\n    return {\r\n      result: null\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    calculate(input) {\r\n      if (!input)\r\n        return `Empty value`\r\n\r\n      return `Long string with result [${input}]`\r\n    }\r\n  }\r\n}\r\n","fileName":"wtf20.vue","caption":"wtf20.vue","description":"WTF","slideText":["Well it turns out that Javascript was the \"problem\"!","JavaScript is sensitive to new lines in code"],"index":27},{"folder":"wtf","folderCaption":"What The F..k?","folderSort":40,"baseName":"/wtf/wtf30.vue","link":"/vue/wtf/wtf30","ext":"vue","sort":30,"html":"\r\n  <div>\r\n    {{ result }}<br>\r\n    <button @click=\"result = calculate(null)\">Calculate 1</button>\r\n    <button @click=\"result = calculate('this is some input value')\">Calculate 2</button>\r\n  </div>\r\n","js":"\r\nexport default {\r\n  data: function() {\r\n    return {\r\n      result: null\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    calculate(input) {\r\n      if (!input)\r\n        return `Empty value`;\r\n\r\n      return;\r\n        `Long string with result [${input}]`;\r\n    }\r\n  }\r\n}\r\n","fileName":"wtf30.vue","caption":"wtf30.vue","description":"ASI === Automatic Semicolon Insertion","slideText":["JavaScript interpreter will insert semicolons where it thinks they should be"],"index":28},{"folder":"wtf","folderCaption":"What The F..k?","folderSort":40,"baseName":"/wtf/wtf40.vue","link":"/vue/wtf/wtf40","ext":"vue","sort":40,"html":"\r\n  <div>\r\n    {{ result }}<br>\r\n    <button @click=\"result = forLoop(5)\">For Loop</button>\r\n    <button @click=\"result = whileLoop(5)\">While Loop</button>\r\n    <button @click=\"result = decision(true)\">Decision</button>\r\n    <button @click=\"result = decision(false)\">Decision</button>\r\n    <button @click=\"result = fancyDecision(true)\">Fancy Decision</button>\r\n    <button @click=\"result = fancyDecision(false)\">Fancy Decision</button>\r\n  </div>\r\n","js":"\r\nexport default {\r\n  data: function() {\r\n    return {\r\n      result: null\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    forLoop (max) {\r\n      var tmp = ['for:']\r\n\r\n      for (var i = 0; i < max; ++i)\r\n\r\n\r\n        tmp.push(i)\r\n\r\n      return tmp;\r\n    },\r\n    whileLoop (max) {\r\n      var tmp = ['while:']\r\n      var i = 0\r\n\r\n      while (i < max)\r\n      {\r\n        tmp.push(++i)\r\n      }\r\n\r\n      return tmp;\r\n    },\r\n    decision (value) {\r\n      return (value) ?\r\n        \"This is positive decision\" :\r\n        \"This is negative decision\"\r\n    },\r\n    fancyDecision (value) {\r\n      return\r\n        (value) ?\r\n          \"This is positive decision\" :\r\n          \"This is negative decision\"\r\n    }\r\n  }\r\n}\r\n","fileName":"wtf40.vue","caption":"wtf40.vue","description":"ASI === Automatic Semicolon Insertion II","slideText":["JavaScript interpreter makes totally wrong decision only regarding return statements other statements are not affected by this \"stupidity\"","Us ESLint option 'consistent-return'!"],"index":29},{"folder":"watch","folderCaption":"Watch","folderSort":50,"baseName":"/watch/watch5.vue","link":"/vue/watch/watch5","ext":"vue","sort":5,"html":"\r\n  <div>\r\n    <input v-model=\"firstName\" placeholder=\"your first name\">\r\n\r\n    <ol>\r\n      <li v-for=\"(change, idx) in changes\" :key=\"idx\">\r\n        {{ change }}\r\n      </li>\r\n    </ol>\r\n  </div>\r\n","js":"\r\nexport default {\r\n  data() {\r\n    return {\r\n      firstName: \"James\",\r\n      changes: [],\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    firstName: function(value, oldValue) {\r\n      this.changes.push({ value, oldValue })\r\n    },\r\n  }\r\n}\r\n","fileName":"watch5.vue","caption":"watch5.vue","description":"Watch variable for change","slideText":["It is easy to watch changes on \"simple\" variables"],"index":30},{"folder":"watch","folderCaption":"Watch","folderSort":50,"baseName":"/watch/watch10.vue","link":"/vue/watch/watch10","ext":"vue","sort":10,"html":"\r\n  <div>\r\n    <input v-model=\"name.firstName\" placeholder=\"your first name\">\r\n    <input v-model=\"name.surName\" placeholder=\"your family name\">\r\n\r\n    <ol>\r\n      <li v-for=\"(change, idx) in changes\" :key=\"idx\">\r\n        {{ change }}\r\n      </li>\r\n    </ol>\r\n  </div>\r\n","js":"\r\nexport default {\r\n  data() {\r\n    return {\r\n      name: {\r\n        firstName: \"James\",\r\n        surName: \"Bond\",\r\n      },\r\n      changes: [],\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    name: function(value, oldValue) {\r\n      this.changes.push({ value, oldValue })\r\n    },\r\n  }\r\n}\r\n","fileName":"watch10.vue","caption":"watch10.vue","description":"Watch for object change","slideText":["But you can't watch, when an element of an object will change!","Or can you?"],"index":31},{"folder":"watch","folderCaption":"Watch","folderSort":50,"baseName":"/watch/watch20.vue","link":"/vue/watch/watch20","ext":"vue","sort":20,"html":"\r\n  <div>\r\n    <input v-model=\"name.firstName\" placeholder=\"your first name\">\r\n    <input v-model=\"name.surName\" placeholder=\"your family name\">\r\n\r\n    <ol>\r\n      <li v-for=\"(change, idx) in changes\" :key=\"idx\">\r\n        {{ change }}\r\n      </li>\r\n    </ol>\r\n  </div>\r\n","js":"\r\nexport default {\r\n  data() {\r\n    return {\r\n      name: {\r\n        firstName: \"James\",\r\n        surName: \"Bond\",\r\n      },\r\n      changes: [],\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    'name.firstName': function(value, oldValue) {\r\n      this.changes.push({ value, oldValue })\r\n    },\r\n    'name.surName': function(value, oldValue) {\r\n      this.changes.push({ value, oldValue })\r\n    },\r\n  },\r\n}\r\n","fileName":"watch20.vue","caption":"watch20.vue","description":"Watch for object change II","slideText":["With special syntax, you can watch or be notified whenever a concrete property of on object changes"],"index":32},{"folder":"watch","folderCaption":"Watch","folderSort":50,"baseName":"/watch/watch30.vue","link":"/vue/watch/watch30","ext":"vue","sort":30,"html":"\r\n  <div>\r\n    <input v-model=\"name.firstName\" placeholder=\"your first name\">\r\n    <input v-model=\"name.surName\" placeholder=\"your family name\">\r\n\r\n    <ol>\r\n      <li v-for=\"(change, idx) in changes\" :key=\"idx\">\r\n        {{ change }}\r\n      </li>\r\n    </ol>\r\n  </div>\r\n","js":"\r\nexport default {\r\n  data() {\r\n    return {\r\n      name: {\r\n        firstName: \"James\",\r\n        surName: \"Bond\",\r\n      },\r\n      changes: [],\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    name: {\r\n      handler: function(value, oldValue) {\r\n        this.changes.push({ value, oldValue })\r\n      },\r\n      deep: true,\r\n    }\r\n  },\r\n}\r\n","fileName":"watch30.vue","caption":"watch30.vue","description":"Watch for object change - deep option","slideText":["But Vue also has special, hidden, gem.","Deep property","But now, old and new values seems to be the same?"],"index":33},{"folder":"watch","folderCaption":"Watch","folderSort":50,"baseName":"/watch/watch31.vue","link":"/vue/watch/watch31","ext":"vue","sort":31,"html":"\r\n  <div>\r\n    <input v-model=\"name.firstName\" placeholder=\"your first name\">\r\n    <input v-model=\"name.surName\" placeholder=\"your family name\">\r\n\r\n    <ol>\r\n      <li v-for=\"(change, idx) in changes\" :key=\"idx\">\r\n        {{ change }}\r\n      </li>\r\n    </ol>\r\n  </div>\r\n","js":"\r\nexport default {\r\n  data() {\r\n    return {\r\n      name: {\r\n        firstName: \"James\",\r\n        surName: \"Bond\",\r\n      },\r\n      changes: [],\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    name: {\r\n      handler: function(value, oldValue) {\r\n        const myValue = JSON.stringify(value)\r\n        const myOldValue = JSON.stringify(oldValue)\r\n        this.changes.push({ myValue, myOldValue })\r\n      },\r\n      deep: true,\r\n    }\r\n  },\r\n}\r\n","fileName":"watch31.vue","caption":"watch31.vue","description":"Watch for object change - deep option II","slideText":["If we transform and save the values, we see that they are not the same across calls","But they are the same in one single call! (Pointers!)"],"index":34},{"folder":"watch","folderCaption":"Watch","folderSort":50,"baseName":"/watch/watch40.vue","link":"/vue/watch/watch40","ext":"vue","sort":40,"html":"\r\n  <div>\r\n    <input v-model=\"search\" placeholder=\"search expr.\">\r\n\r\n    <ol>\r\n      <li v-for=\"(name, idx) in names\" :key=\"idx\">\r\n        {{ name }}\r\n      </li>\r\n    </ol>\r\n  </div>\r\n","js":"\r\nconst allNames = ['Erazem', 'Eric', 'Erik', 'Erika', 'Erin', 'Ermin', 'Ermina',\r\n                  'Erminija', 'Erna', 'Ernes', 'Ernest', 'Erneata', 'Ernestina',\r\n                  'Ernst', 'Eros', 'Ersan', 'Ervin', 'Ervina'];\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      search: '',\r\n      names: [],\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    search(value) {\r\n      this.names = allNames.filter((name) => name.indexOf(value) >= 0)\r\n    }\r\n  },\r\n}\r\n","fileName":"watch40.vue","caption":"watch40.vue","description":"searching when input change","slideText":["Let us take a classic 'search for elements' use-case","The problem is, that initially, search results are empty"],"index":35},{"folder":"watch","folderCaption":"Watch","folderSort":50,"baseName":"/watch/watch50.vue","link":"/vue/watch/watch50","ext":"vue","sort":50,"html":"\r\n  <div>\r\n    <input v-model=\"search\" placeholder=\"search expr.\">\r\n\r\n    <ol>\r\n      <li v-for=\"(name, idx) in names\" :key=\"idx\">\r\n        {{ name }}\r\n      </li>\r\n    </ol>\r\n  </div>\r\n","js":"\r\nconst allNames = ['Erazem', 'Eric', 'Erik', 'Erika', 'Erin', 'Ermin', 'Ermina',\r\n                  'Erminija', 'Erna', 'Ernes', 'Ernest', 'Erneata', 'Ernestina',\r\n                  'Ernst', 'Eros', 'Ersan', 'Ervin', 'Ervina'];\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      search: '',\r\n      names: [],\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    search(value) {\r\n      this.findNames(value)\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.findNames(this.search)\r\n  },\r\n\r\n  methods: {\r\n    findNames(value) {\r\n      this.names = allNames.filter((name) => name.indexOf(value) >= 0)\r\n    }\r\n  },\r\n}\r\n","fileName":"watch50.vue","caption":"watch50.vue","description":"searching when input change + created hook","slideText":["We can easily solve the problem, by calling search function in two places, at startup and when search expression changes"],"index":36},{"folder":"watch","folderCaption":"Watch","folderSort":50,"baseName":"/watch/watch60.vue","link":"/vue/watch/watch60","ext":"vue","sort":60,"html":"\r\n  <div>\r\n    <input v-model=\"search\" placeholder=\"search expr.\">\r\n\r\n    <ol>\r\n      <li v-for=\"(name, idx) in names\" :key=\"idx\">\r\n        {{ name }}\r\n      </li>\r\n    </ol>\r\n  </div>\r\n","js":"\r\nconst allNames = ['Erazem', 'Eric', 'Erik', 'Erika', 'Erin', 'Ermin', 'Ermina',\r\n                  'Erminija', 'Erna', 'Ernes', 'Ernest', 'Erneata', 'Ernestina',\r\n                  'Ernst', 'Eros', 'Ersan', 'Ervin', 'Ervina'];\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      search: '',\r\n      names: [],\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    search: {\r\n      handler (value) { this.names = allNames.filter((name) => name.indexOf(value) >= 0) },\r\n      immediate: true,\r\n    }\r\n  },\r\n}\r\n","fileName":"watch60.vue","caption":"watch60.vue","description":"searching when input change + option immediate","slideText":["But again, Vue has a hidden gem, immediate property"],"index":37},{"folder":"computed","folderCaption":"Computed","folderSort":60,"baseName":"/computed/computed10.vue","link":"/vue/computed/computed10","ext":"vue","sort":10,"html":"\r\n  <div>\r\n    <input v-model=\"number\" placeholder=\"number\">\r\n\r\n    {{ number || 0 }} * 2 = {{ double }}\r\n  </div>\r\n","js":"\r\nexport default {\r\n  data() {\r\n    return {\r\n      number: 5,\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    double ()  {\r\n      return this.number * 2\r\n    },\r\n  },\r\n}\r\n","fileName":"computed10.vue","caption":"computed10.vue","description":"Basic usage of computed element","slideText":["Using computed properties is easy"],"index":38},{"folder":"computed","folderCaption":"Computed","folderSort":60,"baseName":"/computed/computed20.vue","link":"/vue/computed/computed20","ext":"vue","sort":20,"html":"\r\n  <div>\r\n    <input v-model=\"number\" placeholder=\"number\">\r\n    <input v-model=\"double\" placeholder=\"double\">\r\n  </div>\r\n","js":"\r\nexport default {\r\n  data() {\r\n    return {\r\n      number: 5,\r\n      double: 10,\r\n    }\r\n  },\r\n\r\n  /* can't do that\r\n  // ERROR: Duplicate key\r\n  computed: {\r\n    double ()  {\r\n      return this.number * 2\r\n    },\r\n    number () {\r\n      return this.double / 2\r\n    }\r\n  },\r\n  */\r\n\r\n  watch: {\r\n    number () {\r\n      this.double = this.number * 2\r\n    },\r\n    double () {\r\n      this.number = this.double / 2\r\n    },\r\n  }\r\n}\r\n","fileName":"computed20.vue","caption":"computed20.vue","description":"Google like change detection computed -> watch","slideText":["But what if we want dependant computed properties?","Will this create an endless loop?"],"index":39},{"folder":"computed","folderCaption":"Computed","folderSort":60,"baseName":"/computed/computed21.vue","link":"/vue/computed/computed21","ext":"vue","sort":21,"html":"\r\n  <div>\r\n    <input v-model=\"number\" placeholder=\"number\">\r\n    <input v-model=\"double\" placeholder=\"double\">\r\n  </div>\r\n","js":"\r\nexport default {\r\n  computed: {\r\n    double ()  {\r\n      return this.number * 2\r\n    },\r\n    number () {\r\n      return this.double * 2\r\n    }\r\n  }\r\n}\r\n","fileName":"computed21.vue","caption":"computed21.vue","description":"Google like change detection - is this smart?","slideText":["This will not work"],"index":40},{"folder":"computed","folderCaption":"Computed","folderSort":60,"baseName":"/computed/computed30.vue","link":"/vue/computed/computed30","ext":"vue","sort":30,"html":"\r\n  <div>\r\n    <input v-model=\"number\" placeholder=\"number\">\r\n    <input v-model=\"double\" placeholder=\"double\">\r\n  </div>\r\n","js":"\r\nexport default {\r\n  data() {\r\n    return {\r\n      number: 5,\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    double: {\r\n      get () { return this.number * 2 },\r\n      set (newValue) { this.number = newValue / 2 }\r\n    },\r\n  },\r\n}\r\n","fileName":"computed30.vue","caption":"computed30.vue","description":"Google like change detection - with a twist","slideText":["But, as any javascript property, computed properties can have getters and setters"],"index":41},{"folder":"computed","folderCaption":"Computed","folderSort":60,"baseName":"/computed/computed40.vue","link":"/vue/computed/computed40","ext":"vue","sort":40,"html":"\r\n  <div>\r\n    <button @click=\"calculateTimes(10)\">Do calculate</button>\r\n    <hr>\r\n    {{ time1 }}\r\n    <hr>\r\n    {{ time2 }}\r\n  </div>\r\n","js":"\r\nexport default {\r\n  data() {\r\n    return {\r\n      time1: null,\r\n      time2: null\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    currentTime () {\r\n      return new Date();\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    calculateTimes (offsetInMin) {\r\n      const calcNewTime = (date) => {\r\n        return new Date(date.getTime() + (offsetInMin * 60 * 1000))\r\n      }\r\n\r\n      this.time1 = calcNewTime(new Date())\r\n      this.time2 = calcNewTime(this.currentTime)\r\n    }\r\n  }\r\n}\r\n","fileName":"computed40.vue","caption":"computed40.vue","description":"When does computed property gets recalculated?","slideText":["Results are cached and if nothing changes they will not get recalculated"],"index":42},{"folder":"computed","folderCaption":"Computed","folderSort":60,"baseName":"/computed/computed50.vue","link":"/vue/computed/computed50","ext":"vue","sort":50,"html":"\r\n  <div>\r\n    <button @click=\"calculateTimes(10)\">Do calculate</button>\r\n    <hr>\r\n    {{ time1 }}\r\n    <hr>\r\n    {{ time2 }}\r\n  </div>\r\n","js":"\r\nexport default {\r\n  data() {\r\n    return {\r\n      time1: null,\r\n      time2: null\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    currentTime () {\r\n      console.log(this.time1);\r\n      return new Date();\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    calculateTimes (offsetInMin) {\r\n      const calcNewTime = (date) => {\r\n        return new Date(date.getTime() + (offsetInMin * 60 * 1000))\r\n      }\r\n\r\n      this.time1 = calcNewTime(new Date())\r\n      this.time2 = calcNewTime(this.currentTime)\r\n    }\r\n  }\r\n}\r\n","fileName":"computed50.vue","caption":"computed50.vue","description":"When does computed property gets recalculated?","slideText":["Single, \"insignificant\" change can have unexpected results"],"index":43}],"folders":[{"id":"10","pages":[0,1,2,3,4,5,6],"folder":"constants","caption":"Constants"},{"id":"20","pages":[7,8,9,10,11],"folder":"functions","caption":"Structure of VUE single file"},{"id":"30","pages":[12,13,14,15,16,17,18,19,20,21,22,23,24,25],"folder":"reactivity","caption":"Reactivity"},{"id":"40","pages":[26,27,28,29],"folder":"wtf","caption":"What The F..k?"},{"id":"50","pages":[30,31,32,33,34,35,36,37],"folder":"watch","caption":"Watch"},{"id":"60","pages":[38,39,40,41,42,43],"folder":"computed","caption":"Computed"}]}